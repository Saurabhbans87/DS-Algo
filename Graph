import java.util.*;

public class GraphTraversal {

    private Map<Integer, List<Integer>> adjList;

    public GraphTraversal() {
        adjList = new HashMap<>();
    }

    // Add edge to the graph (undirected)
    public void addEdge(int u, int v) {
        adjList.putIfAbsent(u, new ArrayList<>());
        adjList.putIfAbsent(v, new ArrayList<>());

        adjList.get(u).add(v);
        adjList.get(v).add(u);
    }

    // ---------------------------------------------
    // âœ… DFS Recursive (Single Public Method)
    public void dfsRecursive(int start) {
        Set<Integer> visited = new HashSet<>();
        System.out.println("DFS (Recursive) starting from node " + start + ":");
        dfsRecursiveHelper(start, visited);
        System.out.println();
    }

    private void dfsRecursiveHelper(int node, Set<Integer> visited) {
        visited.add(node);
        System.out.print(node + " ");

        for (int neighbor : adjList.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                dfsRecursiveHelper(neighbor, visited);
            }
        }
    }

    // ---------------------------------------------
    // âœ… DFS Iterative
    public void dfsIterative(int start) {
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> stack = new Stack<>();

        System.out.println("DFS (Iterative) starting from node " + start + ":");

        stack.push(start);

        while (!stack.isEmpty()) {
            int node = stack.pop();

            if (!visited.contains(node)) {
                visited.add(node);
                System.out.print(node + " ");

                // Reverse to mimic recursive order (optional)
                List<Integer> neighbors = adjList.getOrDefault(node, new ArrayList<>());
                Collections.reverse(neighbors);

                for (int neighbor : neighbors) {
                    if (!visited.contains(neighbor)) {
                        stack.push(neighbor);
                    }
                }
            }
        }

        System.out.println();
    }

    // ---------------------------------------------
    // âœ… BFS Iterative
    public void bfsIterative(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();

        System.out.println("BFS (Iterative) starting from node " + start + ":");

        queue.add(start);
        visited.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");

            for (int neighbor : adjList.getOrDefault(node, new ArrayList<>())) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.add(neighbor);
                }
            }
        }

        System.out.println();
    }

    // ---------------------------------------------
    // âœ… BFS Recursive
    public void bfsRecursive(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();

        System.out.println("BFS (Recursive) starting from node " + start + ":");

        queue.add(start);
        visited.add(start);

        bfsRecursiveHelper(queue, visited);
        System.out.println();
    }

    private void bfsRecursiveHelper(Queue<Integer> queue, Set<Integer> visited) {
        if (queue.isEmpty()) return;

        int node = queue.poll();
        System.out.print(node + " ");

        for (int neighbor : adjList.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                visited.add(neighbor);
                queue.add(neighbor);
            }
        }

        bfsRecursiveHelper(queue, visited);
    }

    // ---------------------------------------------
    // ðŸš€ Main Method to Test Everything
    public static void main(String[] args) {
        GraphTraversal graph = new GraphTraversal();

        // Building sample graph:
        // 0 -- 1 -- 3
        // |    |
        // 2    4
        //  \  /
        //    5
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(4, 5);

        int startNode = 0;

        graph.dfsRecursive(startNode);
        graph.dfsIterative(startNode);
        graph.bfsIterative(startNode);
        graph.bfsRecursive(startNode);
    }
}

